# coding=utf-8
"""
Created on 27.4.2018
Updated on 3.8.2018

Potku is a graphical user interface for analyzation and
visualization of measurement data collected from a ToF-ERD
telescope. For physics calculations Potku uses external
analyzation components.
Copyright (C) 2018 Severi Jääskeläinen, Samuel Kaiponen, Heta Rekilä and
Sinikka Siironen

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program (file named 'LICENCE').
"""
__author__ = "Severi Jääskeläinen \n Samuel Kaiponen \n Heta Rekilä \n" \
             "Sinikka Siironen \n Juhani Sundell"
__version__ = "2.0"

import platform
import subprocess
import shlex
import glob

from . import general_functions as gf

from .beam import Beam
from .detector import Detector
from .target import Target
from .parsing import CSVParser
from pathlib import Path


class GetEspe:
    """
    Class for handling calling the external program get_espe to generate
    energy spectra coordinates.
    """
    __slots__ = "__recoil_file", "__settings", "__beam", "__detector", \
                "__target", "__channel_width", "__reference_density", \
                "__fluence", "output_file", "__timeres", "__density", \
                "__solid", "__erd_file", "__output_file"

    def __init__(self, beam: Beam, detector: Detector, target: Target,
                 solid, recoil_file: Path, erd_file: Path, spectrum_file: Path,
                 reference_density: float = 4.98, multiplier: float = 1e22,
                 ch: float = 0.025, fluence: float = 1.00e+9,
                 timeres: float = 250.0):
        """Initializes the GetEspe class.
        """
        self.__beam = beam
        self.__detector = detector
        self.__target = target
        self.__channel_width = ch
        self.__fluence = fluence  # from Run object
        self.__timeres = timeres
        self.__density = reference_density * multiplier
        self.__solid = solid
        self.__recoil_file = recoil_file
        self.__erd_file = erd_file
        self.__output_file = spectrum_file

    @staticmethod
    def calculate_simulated_spectrum(write_to_file=True, **kwargs):
        """Calculates simulated spectrum. Calling this is the same as creating
        a new GetEspe object and calling its run method.

        Args:
            write_to_file: whether spectrum is written to a file
            kwargs: keyword arguments passed down to GetEspe

        Return:
            spectrum as a list of tuples
        """
        get_espe = GetEspe(**kwargs)
        return get_espe.run(write_to_file=write_to_file)

    @staticmethod
    def read_espe_file(espe_file: Path):
        """Reads a file generated by get_espe.

        Args:
            espe_file: A string representing path of energy spectrum data file
                (.simu) to be read.

        Returns:
            Returns energy spectrum data as a list.
        """
        parser = CSVParser((0, float), (1, float))
        try:
            # TODO could also set the method to 'cols'
            return list(parser.parse_file(espe_file, method="row"))
            # TODO handle NaNs and Infs
        except (OSError, UnicodeDecodeError, IndexError):
            # File was not found, or it could not be decoded (for example, it
            # could have been .png)
            pass
        return []

    def run(self, write_to_file=True):
        """Run get_espe binary with given parameters.

        Args:
            write_to_file: whether get_espe output is written to file
        """
        espe_cmd = self.get_command()
        bin_dir = gf.get_bin_dir()

        espe_process = subprocess.Popen(
            espe_cmd, cwd=bin_dir, stdin=subprocess.PIPE,
            stdout=subprocess.PIPE, universal_newlines=True)

        for f in glob.glob(str(self.__erd_file)):
            with open(f, "r") as file:
                for line in file:
                    espe_process.stdin.write(line)

        espe_process.stdin.close()

        stdout = iter(espe_process.stdout.readline, "")
        parser = CSVParser((0, float), (1, float))

        if write_to_file:
            output = []
            with self.__output_file.open("w") as file:
                for x, y in parser.parse_strs(stdout, method="row"):
                    file.write(f"{x} {y}\n")
                    output.append((x, y))
            return output
        return list(parser.parse_strs(stdout, method="row"))

    def get_command(self):
        """Returns the command to run get_espe executable.
        """
        # Options for get_espe
        #
        # get_espe - Calculate an energy spectrum from simulated ERD data
        #
        # Options:
        #         -real    only real events are handled
        #         -ch      channel width in the output (MeV)
        #         -depth   depth range of the events (nm, two values)
        #         -dist    file name for depth distribution
        #         -m2      average mass of the secondary particles (u)
        #         -avemass use average mass for calculating energy from TOF
        #         -scale   scale the total intensity to value
        #         -err     give statistics in the third column
        #         -detsize limit in the size of the detector foil (mm)
        #         -erange  energy range in the output spectrum (MeV)
        #         -timeres time resolution of the TOF-detector (ps, FWHM)
        #         -eres    energy resolution (keV, FWHM) of the SSD, (energy
        #                  signal used!)
        #         -toflen  time-of-flight length (m)
        #         -beam    mass number and the chemical symbol of the primary
        #                  ion
        #         -dose    dose of the beam = fluence, in particles (6.24e12 == 1 p-uC)
        #         -energy  beam energy (MeV)
        #         -theta   scattering angle (deg)
        #         -tangle  angle between target surface and beam (deg)
        #         -solid   solid angle of the detector (msr)
        #         -density average atomic density of the first 10 nm layer
        #                  (at./cm^3)
        toflen = self.__detector.foils[self.__detector.tof_foils[1]].distance
        toflen -= self.__detector.foils[self.__detector.tof_foils[0]].distance
        toflen_in_meters = toflen / 1000

        params = f"-beam {self.__beam.ion.get_prefix()} " \
                 f"-energy {self.__beam.energy} " \
                 f"-theta {self.__detector.detector_theta} " \
                 f"-tangle {self.__target.target_theta} " \
                 f"-timeres {self.__timeres} " \
                 f"-toflen {toflen_in_meters} " \
                 f"-solid {self.__solid} " \
                 f"-dose {self.__fluence} " \
                 f"-avemass " \
                 f"-density {self.__density} " \
                 f"-ch {self.__channel_width}"

        if platform.system() == "Windows":
            executable = str(gf.get_bin_dir() / "get_espe.exe")
        else:
            executable = "./get_espe"

        # shlex.split does not handle file paths well on Windows so recoil
        # file is provided separately
        return (
            executable, *shlex.split(params), "-dist", str(self.__recoil_file)
        )
